//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RubricaForm.ServiceOnDb {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contatto", Namespace="http://schemas.datacontract.org/2004/07/Serialator")]
    [System.SerializableAttribute()]
    public partial class Contatto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> BirthDayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CognomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberPhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> BirthDay {
            get {
                return this.BirthDayField;
            }
            set {
                if ((this.BirthDayField.Equals(value) != true)) {
                    this.BirthDayField = value;
                    this.RaisePropertyChanged("BirthDay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cognome {
            get {
                return this.CognomeField;
            }
            set {
                if ((object.ReferenceEquals(this.CognomeField, value) != true)) {
                    this.CognomeField = value;
                    this.RaisePropertyChanged("Cognome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Nome {
            get {
                return this.NomeField;
            }
            set {
                if ((object.ReferenceEquals(this.NomeField, value) != true)) {
                    this.NomeField = value;
                    this.RaisePropertyChanged("Nome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberPhone {
            get {
                return this.NumberPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberPhoneField, value) != true)) {
                    this.NumberPhoneField = value;
                    this.RaisePropertyChanged("NumberPhone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/Serialator.Entities")]
    [System.SerializableAttribute()]
    public partial class Person : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceOnDb.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetContatto", ReplyAction="http://tempuri.org/IService/GetContattoResponse")]
        RubricaForm.ServiceOnDb.Contatto GetContatto(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetContatto", ReplyAction="http://tempuri.org/IService/GetContattoResponse")]
        System.Threading.Tasks.Task<RubricaForm.ServiceOnDb.Contatto> GetContattoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllContatti", ReplyAction="http://tempuri.org/IService/GetAllContattiResponse")]
        RubricaForm.ServiceOnDb.Contatto[] GetAllContatti();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllContatti", ReplyAction="http://tempuri.org/IService/GetAllContattiResponse")]
        System.Threading.Tasks.Task<RubricaForm.ServiceOnDb.Contatto[]> GetAllContattiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Subscribe", ReplyAction="http://tempuri.org/IService/SubscribeResponse")]
        int Subscribe(RubricaForm.ServiceOnDb.Contatto input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Subscribe", ReplyAction="http://tempuri.org/IService/SubscribeResponse")]
        System.Threading.Tasks.Task<int> SubscribeAsync(RubricaForm.ServiceOnDb.Contatto input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertXml", ReplyAction="http://tempuri.org/IService/InsertXmlResponse")]
        void InsertXml(RubricaForm.ServiceOnDb.Person xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertXml", ReplyAction="http://tempuri.org/IService/InsertXmlResponse")]
        System.Threading.Tasks.Task InsertXmlAsync(RubricaForm.ServiceOnDb.Person xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateContatto", ReplyAction="http://tempuri.org/IService/UpdateContattoResponse")]
        bool UpdateContatto(RubricaForm.ServiceOnDb.Contatto model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateContatto", ReplyAction="http://tempuri.org/IService/UpdateContattoResponse")]
        System.Threading.Tasks.Task<bool> UpdateContattoAsync(RubricaForm.ServiceOnDb.Contatto model);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : RubricaForm.ServiceOnDb.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<RubricaForm.ServiceOnDb.IService>, RubricaForm.ServiceOnDb.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RubricaForm.ServiceOnDb.Contatto GetContatto(int id) {
            return base.Channel.GetContatto(id);
        }
        
        public System.Threading.Tasks.Task<RubricaForm.ServiceOnDb.Contatto> GetContattoAsync(int id) {
            return base.Channel.GetContattoAsync(id);
        }
        
        public RubricaForm.ServiceOnDb.Contatto[] GetAllContatti() {
            return base.Channel.GetAllContatti();
        }
        
        public System.Threading.Tasks.Task<RubricaForm.ServiceOnDb.Contatto[]> GetAllContattiAsync() {
            return base.Channel.GetAllContattiAsync();
        }
        
        public int Subscribe(RubricaForm.ServiceOnDb.Contatto input) {
            return base.Channel.Subscribe(input);
        }
        
        public System.Threading.Tasks.Task<int> SubscribeAsync(RubricaForm.ServiceOnDb.Contatto input) {
            return base.Channel.SubscribeAsync(input);
        }
        
        public void InsertXml(RubricaForm.ServiceOnDb.Person xml) {
            base.Channel.InsertXml(xml);
        }
        
        public System.Threading.Tasks.Task InsertXmlAsync(RubricaForm.ServiceOnDb.Person xml) {
            return base.Channel.InsertXmlAsync(xml);
        }
        
        public bool UpdateContatto(RubricaForm.ServiceOnDb.Contatto model) {
            return base.Channel.UpdateContatto(model);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateContattoAsync(RubricaForm.ServiceOnDb.Contatto model) {
            return base.Channel.UpdateContattoAsync(model);
        }
    }
}
