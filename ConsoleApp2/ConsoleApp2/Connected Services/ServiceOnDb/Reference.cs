//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp2.ServiceOnDb {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceOnDb.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetContatto", ReplyAction="http://tempuri.org/IService/GetContattoResponse")]
        Serialator.Contatto GetContatto(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetContatto", ReplyAction="http://tempuri.org/IService/GetContattoResponse")]
        System.Threading.Tasks.Task<Serialator.Contatto> GetContattoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllContatti", ReplyAction="http://tempuri.org/IService/GetAllContattiResponse")]
        Serialator.Contatto[] GetAllContatti();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAllContatti", ReplyAction="http://tempuri.org/IService/GetAllContattiResponse")]
        System.Threading.Tasks.Task<Serialator.Contatto[]> GetAllContattiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Subscribe", ReplyAction="http://tempuri.org/IService/SubscribeResponse")]
        int Subscribe(Serialator.Contatto input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Subscribe", ReplyAction="http://tempuri.org/IService/SubscribeResponse")]
        System.Threading.Tasks.Task<int> SubscribeAsync(Serialator.Contatto input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertXml", ReplyAction="http://tempuri.org/IService/InsertXmlResponse")]
        void InsertXml(Serialator.Entities.Person xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertXml", ReplyAction="http://tempuri.org/IService/InsertXmlResponse")]
        System.Threading.Tasks.Task InsertXmlAsync(Serialator.Entities.Person xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateContatto", ReplyAction="http://tempuri.org/IService/UpdateContattoResponse")]
        bool UpdateContatto(Serialator.Contatto model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateContatto", ReplyAction="http://tempuri.org/IService/UpdateContattoResponse")]
        System.Threading.Tasks.Task<bool> UpdateContattoAsync(Serialator.Contatto model);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ConsoleApp2.ServiceOnDb.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ConsoleApp2.ServiceOnDb.IService>, ConsoleApp2.ServiceOnDb.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Serialator.Contatto GetContatto(int id) {
            return base.Channel.GetContatto(id);
        }
        
        public System.Threading.Tasks.Task<Serialator.Contatto> GetContattoAsync(int id) {
            return base.Channel.GetContattoAsync(id);
        }
        
        public Serialator.Contatto[] GetAllContatti() {
            return base.Channel.GetAllContatti();
        }
        
        public System.Threading.Tasks.Task<Serialator.Contatto[]> GetAllContattiAsync() {
            return base.Channel.GetAllContattiAsync();
        }
        
        public int Subscribe(Serialator.Contatto input) {
            return base.Channel.Subscribe(input);
        }
        
        public System.Threading.Tasks.Task<int> SubscribeAsync(Serialator.Contatto input) {
            return base.Channel.SubscribeAsync(input);
        }
        
        public void InsertXml(Serialator.Entities.Person xml) {
            base.Channel.InsertXml(xml);
        }
        
        public System.Threading.Tasks.Task InsertXmlAsync(Serialator.Entities.Person xml) {
            return base.Channel.InsertXmlAsync(xml);
        }
        
        public bool UpdateContatto(Serialator.Contatto model) {
            return base.Channel.UpdateContatto(model);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateContattoAsync(Serialator.Contatto model) {
            return base.Channel.UpdateContattoAsync(model);
        }
    }
}
